[comment encoding = UTF-8 /]
[comment]
 As we handle UML models, we register UML metamodel.
 Be careful while changing .mtl name, module name MUST 
 have the same name as its file.
[/comment]
[module my-m2t('http://www.eclipse.org/uml2/4.0.0/UML')]

[macro public pluralise (someText : String) : String]
	[someText/]s
[/macro]

[comment]
 Main entry.
 * Do NOT change its name, it must be "generate".
 * You can change input UML type to the one
   you want (e.g, "m : Model" or "c : Class" ...).
 * "[file ../]" block can be transfered in other 
   templates. Main entry does NOT have to contain
   this block, it can be put in other ones.
[/comment]
[template public generate(m : Model)]
[comment @main/]
[file (m.name.concat('.md'), false, 'UTF-8')]
[m.packagedElement.gen()/]
[/file]
[/template]

[template public gen(p : PackageableElement) /]
[template public gen(p : Package) ? (not p.packagedElement->isEmpty())]

# ['['/]PACKAGE] [p.qualifiedName/]
[p.packagedElement->select(not oclIsKindOf(Package)).gen()/]
[p.packagedElement->select(oclIsKindOf(Package)).gen()/]
[/template]

[template public gen(c : Class)]
Attempt:8
[pluralise(c.name)/]
"[pluralise(c.name)/]"
[c.name.pluralise().toUpperFirst()/]
[pluralise(c.name).toUpperFirst()/]
[pluralise(c.name).toUpperFirst()/] = new Meteor.Collection("[pluralise(c.name.toLowerFirst())/]");
[c.name.toUpperFirst()/]s = new Meteor.Collection("[pluralise(c.name)/]");
## ['['/]CLASS] [c.name/]
[for (p : Property | c.attribute)]
[p.genProp()/]
[/for]
[/template]

[template public genProp(p : Property)]
* ['['/]Property] __[p.name/]__: *[if (p.type <> null)][p.type.qualifiedName/][else]Undefined[/if]*
[/template]
